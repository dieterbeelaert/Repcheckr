{
  "name": "bayes",
  "description": "Naive Bayes Classifier for node.js",
  "version": "0.0.4",
  "author": {
    "name": "Tolga Tezel"
  },
  "keywords": [
    "naive",
    "bayes",
    "categorize",
    "classify",
    "classifier"
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": ">=0.8.1"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "main": "./lib/naive_bayes",
  "repository": {
    "type": "git",
    "url": "http://github.com/ttezel/bayes.git"
  },
  "scripts": {
    "test": "mocha -t 30000 -R spec"
  },
  "readme": "#`bayes`: A Naive-Bayes classifier for node.js\n\n\n`bayes` takes a document (piece of text), and tells you what category that document belongs to.\n\n##What can I use this for?\n\nYou can use this for categorizing any text content into any arbitrary set of **categories**. For example:\n\n- is an email **spam**, or **not spam** ?\n- is a news article about **technology**, **politics**, or **sports** ?\n- is a piece of text expressing **positive** emotions, or **negative** emotions?\n\n##Installing\n\n```\nnpm install bayes\n```\n\n##Usage\n\n```javascript\nvar bayes = require('bayes')\n\nvar classifier = bayes()\n\n// teach it positive phrases\n\nclassifier.learn('amazing, awesome movie!! Yeah!! Oh boy.', 'positive')\nclassifier.learn('Sweet, this is incredibly, amazing, perfect, great!!', 'positive')\n\n// teach it a negative phrase\n\nclassifier.learn('terrible, shitty thing. Damn. Sucks!!', 'negative')\n\n// now ask it to categorize a document it has never seen before\n\nclassifier.categorize('awesome, cool, amazing!! Yay.')\n// => 'positive'\n\n// serialize the classifier's state as a JSON string.\nvar stateJson = classifier.toJson()\n\n// load the classifier back from its JSON representation.\nvar revivedClassifier = bayes.fromJson(stateJson)\n\n```\n\n##API\n\n###`var classifier = bayes([options])`\n\nReturns an instance of a Naive-Bayes Classifier.\n\nPass in an optional `options` object to configure the instance. If you specify a `tokenizer` function in `options`, it will be used as the instance's tokenizer. The default tokenizer removes punctuation and splits on spaces.\n\nEg.\n\n```js\nvar classifier = bayes({\n    tokenizer: function (text) { return text.split(' ')\n})\n```\n\n###`classifier.learn(text, category)`\n\nTeach your classifier what `category` the `text` belongs to. The more you teach your classifier, the more reliable it becomes. It will use what it has learned to identify new documents that it hasn't seen before.\n\n###`classifier.categorize(text)`\n\nReturns the `category` it thinks `text` belongs to. Its judgement is based on what you have taught it with **.learn()**.\n\n###`classifier.toJson()`\n\nReturns the JSON representation of a classifier.\n\n###`var classifier = bayes.fromJson(jsonStr)`\n\nReturns a classifier instance from the JSON representation. Use this with the JSON representation obtained from `classifier.toJson()`\n\n## License\n\n(The MIT License)\n\nCopyright (c) by Tolga Tezel <tolgatezel11@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/ttezel/bayes/issues"
  },
  "_id": "bayes@0.0.4",
  "dist": {
    "shasum": "e1ffdd5cfb16852222da57ce79c87fb7437a164d"
  },
  "_from": "bayes@*",
  "_resolved": "https://registry.npmjs.org/bayes/-/bayes-0.0.4.tgz"
}
